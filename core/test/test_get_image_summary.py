import os
import unittest
from unittest.mock import Mock, MagicMock, patch

#Globals patching

post_patch = patch('requests.post').start()
loads_patch = patch('json.loads').start()
environ_patch = patch.dict(os.environ, {"GPT4V_API_KEY": "mock_key", "GPT4V_API_BASE": "mock_base", "GPT4V_DEPLOYMENT_NAME": "mock_deployment"}).start()

from core.utils.image_summary import getImageSummary

class TestImageSummary(unittest.TestCase):

    def test_getImageSummary(self):
        image = "data:image/"
        mock_response = {'choices': [{'message': {'content': 'mock_content'}}]}
        post_patch.return_value = Mock()
        loads_patch.return_value = mock_response
        self.assertEqual(getImageSummary(image), "mock_content")
        post_patch.assert_called()
        loads_patch.assert_called()
    
    def test_getImageSummary_no_response(self):
        image = "data:image/"
        mock_response = {'choices': [{'message': {'content': None}}]}
        post_patch.return_value = Mock()
        loads_patch.return_value = mock_response
        self.assertEqual(getImageSummary(image), "No response generated by GPT-4 Vision. Please try again.")
        post_patch.assert_called()
        loads_patch.assert_called()

    def test_getImageSummary_invalid_image(self):
        image = "invalid_image"
        assert(getImageSummary(image), "Image string is not valid. Please try again with a valid Image.")
