"""
Testing the get_image_summary function in image_summary.py
"""

import os
import unittest
from unittest.mock import Mock, patch

#Globals patching

post_patch = patch('requests.post').start()
loads_patch = patch('json.loads').start()
environ_patch = patch.dict(os.environ, {
    "GPT4V_API_KEY": "mock_key",
    "GPT4V_API_BASE": "mock_base",
    "GPT4V_DEPLOYMENT_NAME": "mock_deployment"
    }).start()

from core.utils.image_summary import get_image_summary

class TestImageSummary(unittest.TestCase):
    """
    Tests the get_image_summary function in image_summary.py
    """

    def test_get_image_summary(self):
        """
        Trivial test for get_image_summary
        """
        image = "data:image/"
        mock_response = {'choices': [{'message': {'content': 'mock_content'}}]}
        post_patch.return_value = Mock()
        loads_patch.return_value = mock_response
        self.assertEqual(get_image_summary(image), "mock_content")
        post_patch.assert_called()
        loads_patch.assert_called()

    def test_get_image_summary_no_response(self):
        """
        Tests that get_image_summary returns an error message when there is no response
        """
        image = "data:image/"
        mock_response = {'choices': [{'message': {'content': None}}]}
        post_patch.return_value = Mock()
        loads_patch.return_value = mock_response
        self.assertEqual(get_image_summary(image),
                "No response generated by GPT-4 Vision. Please try again.")
        post_patch.assert_called()
        loads_patch.assert_called()

    def test_get_image_summary_invalid_image(self):
        """
        Tests that get_image_summary returns an error message when the image is invalid
        """
        image = "invalid_image"
        self.assertEquals(get_image_summary(image),
                "Image string is not valid. Please try again with a valid Image.")
